{"version":3,"sources":["Utils/API.js","components/StaffTable.jsx","components/Searchbox.jsx","App.jsx","serviceWorker.js","index.js"],"names":["axios","get","StaffTable","props","rows","headings","staffList","length","Object","keys","map","heading","onClick","onColumnClick","key","staff","tds","value","push","src","alt","Username","Container","Table","striped","bordered","hover","Searchbox","FormControl","className","type","userInput","onChange","handleInputChange","placeholder","App","useState","setStaffList","filteredStaff","setFilteredStaff","setUserInput","sortColumn","setSortColumn","useEffect","API","then","response","data","results","console","log","formattedStaff","Photo","picture","medium","Name","name","first","last","login","username","Age","dob","age","Email","email","Phone","phone","City","location","city","Country","country","catch","error","fluid","Jumbotron","style","backgroundColor","event","target","searchResults","filter","row","toLowerCase","indexOf","sort","a","b","search","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.08b56a5a.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst randomUrl = \"https://randomuser.me/api/?results=500\";\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n  search: function() {\n    return axios.get(randomUrl);\n  }\n};\n","import React from \"react\";\nimport { Container, Table } from \"react-bootstrap\";\n\nexport default function StaffTable(props) {\n  let headings = [];\n  if (props.staffList && props.staffList.length > 0) {\n    headings = Object.keys(props.staffList[0]).map((heading) => {\n      return (\n        <th onClick={() => props.onColumnClick(heading)} key={heading}>\n          {heading}\n        </th>\n      );\n    });\n  }\n\n  let rows;\n  if (props.staffList) {\n    rows = props.staffList.map((staff) => {\n      const tds = [];\n      for (const key in staff) {\n        const value = staff[key];\n        if (key === \"Photo\") {\n          tds.push(\n            <td key={value}>\n              <img src={value} alt={value} />\n            </td>\n          );\n        } else {\n          tds.push(<td key={value}>{value}</td>);\n        }\n      }\n      return <tr key={staff.Username}>{tds}</tr>;\n    });\n  } else {\n    rows = \"Loading...\";\n  }\n\n  return (\n    <Container>\n      <Table striped bordered hover>\n        <thead>\n          <tr >\n            {headings}\n            {/* {props.headers.map((heading) => (\n              <th onClick={()=> props.onColumnClick(heading)} key={heading}>\n                {heading}\n              </th>\n            ))} */}\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </Container>\n  );\n}\n","import React from \"react\";\nimport { Container, FormControl } from \"react-bootstrap\";\n\nexport default function Searchbox(props) {\n  return (\n    <Container>\n      <FormControl \n        className=\"search\"\n        type=\"text\"\n        value={props.userInput}\n        onChange={props.handleInputChange}\n        placeholder=\"Just begin typing to search...\"\n      />\n    </Container>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Container, Jumbotron } from \"react-bootstrap\";\nimport API from \"./Utils/API\";\nimport \"./App.css\";\nimport StaffTable from \"./components/StaffTable\";\nimport Searchbox from \"./components/Searchbox\";\n\nexport default function App() {\n  const [staffList, setStaffList] = useState([]);\n  const [filteredStaff, setFilteredStaff] = useState([]);\n  const [userInput, setUserInput] = useState(\"\");\n  const [sortColumn, setSortColumn] = useState();\n\n  useEffect(() => {\n    API.search()\n      .then((response) => {\n        setStaffList(response.data.results);\n        console.log(staffList);\n        let formattedStaff = response.data.results.map((staff) => {\n          return {\n            Photo: staff.picture.medium,\n            Name: `${staff.name.first} ${staff.name.last}`,\n            Username: staff.login.username,\n            Age: staff.dob.age,\n            Email: staff.email,\n            Phone: staff.phone,\n            City: staff.location.city,\n            Country: staff.location.country\n          };\n        });\n        setFilteredStaff(formattedStaff);\n      })\n\n      .catch((error) => console.log(error));\n  }, []);\n\n  function handleInputChange(event) {\n    setUserInput(event.target.value);\n  }\n\n  function search(rows) {\n    let searchResults = rows.filter(\n      (row) =>\n        row.Name.toLowerCase().indexOf(userInput) > -1 ||\n        row.Username.toLowerCase().indexOf(userInput) > -1 ||\n        row.Email.toLowerCase().indexOf(userInput) > -1 ||\n        row.City.toLowerCase().indexOf(userInput) > -1 ||\n        row.Country.toLowerCase().indexOf(userInput) > -1\n    ) \n\n    if (sortColumn === \"Name\") {\n      searchResults.sort((a, b) => {\n        return a.Name < b.Name ? -1 : 1;\n      });\n    } else if (sortColumn === \"Username\") {\n      searchResults.sort((a, b) => {\n        return a.Username < b.Username ? -1 : 1;\n      })\n    }\n    return searchResults;\n  }\n\n  function onColumnClick(heading) {\n    setSortColumn(heading)\n  }\n\n  return (\n    <Container fluid>\n      <Jumbotron\n        className=\"d-flex justify-content-center\"\n        style={{ backgroundColor: \"#7AC9ED\" }}\n      >\n        <h1>Staff Directory</h1>\n      </Jumbotron>\n      <Searchbox userInput={userInput} handleInputChange={handleInputChange} />\n      <StaffTable\n        onColumnClick={onColumnClick}\n        staffList={search(filteredStaff)}\n      />\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}